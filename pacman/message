#!/usr/bin/env python3
import sys
import os

def create_vertex(map):
    vertex = []
    for i in range(0, len(map)):
        if map[i].find('F') != -1:
            pos_x = map[i].find('F')
            pos_y = i
        vertex.append([-1] * len(map[i]))
    vertex[pos_y][pos_x] = 0
    return((vertex, pos_x, pos_y))

def get_next(current, vertex, map, turn):
    next_node = []

    for i in range(0, len(current)):
        if current[i][1] - 1 >= 0:
            if (map[current[i][1] - 1][current[i][0]] != '1' and vertex[current[i][1] - 1][current[i][0]] == -1):
                if (map[current[i][1] - 1][current[i][0]] == 'P'):
                    return ([])
                vertex[current[i][1] - 1][current[i][0]] = turn % 10
                next_node.append((current[i][0], current[i][1] - 1))
        if current[i][0] + 1 < len(map):
            if (map[current[i][1]][current[i][0] + 1] != '1' and vertex[current[i][1]][current[i][0] + 1] == -1):
                if (map[current[i][1]][current[i][0] - 1] == 'P'):
                    return ([])
                vertex[current[i][1]][current[i][0] + 1] = turn % 10
                next_node.append((current[i][0] + 1, current[i][1]))
        if current[i][1] + 1 < len(map):
            if (map[current[i][1] + 1][current[i][0]] != '1' and vertex[current[i][1] + 1][current[i][0]] == -1):
                if (map[current[i][1] + 1][current[i][0]] == 'P'):
                    return ([])
                vertex[current[i][1] + 1][current[i][0]] = turn % 10
                next_node.append((current[i][0], current[i][1] + 1))
        if current[i][0] - 1 >= 0:
            if (map[current[i][1]][current[i][0] - 1] != '1' and vertex[current[i][1]][current[i][0] - 1] == -1):
                if (map[current[i][1]][current[i][0] - 1] == 'P'):
                    return ([])
                vertex[current[i][1]][current[i][0] - 1] = turn % 10
                next_node.append((current[i][0] - 1, current[i][1]))
    return(next_node)

# def check_end(vertex):
#     for i in range(0, vertex):
#         if (vertex[i].find(-1) != -1):
#             return (False)
#     return (True)

def dijkstra(map, wall, empty):
    info = create_vertex(map)
    vertex = info[0]
    current = [(info[1], info[2])]
    turn = 1
    
    while (True):
        next_node = get_next(current, vertex, map, turn)
        if (next_node == []):
            break
        current = next_node.copy()
        next_node.clear()
        turn += 1
    print_map(map, vertex, wall, empty)
    return (1)

def print_map(map, vertex, wall, empty):
    for i in range(0, len(map)):
        for j in range(0, len(map[i])):
            if (map[i][j] == '1'):
                print(wall, end='')
                continue
            if (map[i][j] == 'P'):
                print('P', end='')
                continue
            if (map[i][j] == 'F'):
                print('F', end='')
                continue
            if (vertex[i][j] != -1):
                print(str(vertex[i][j]), end='')
                continue
            print(" ", end='')
        print()


if __name__ == '__main__':
    if len(sys.argv) != 4:
        exit (84)
    try:
        f = open(sys.argv[1])
    except EnvironmentError:
        exit(84)
    if os.stat(sys.argv[1]).st_size == 0:
        exit (84)
    dijkstra(f.read().splitlines(), sys.argv[2], sys.argv[3])